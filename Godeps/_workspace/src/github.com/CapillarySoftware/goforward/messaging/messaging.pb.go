// Code generated by protoc-gen-gogo.
// source: messaging.proto
// DO NOT EDIT!

/*
	Package messaging is a generated protocol buffer package.

	It is generated from these files:
		messaging.proto

	It has these top-level messages:
		Rfc3164
		Rfc5424
		Json
		Food
*/
package messaging

import proto "code.google.com/p/gogoprotobuf/proto"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import fmt1 "fmt"
import strings "strings"
import reflect "reflect"

import fmt2 "fmt"
import strings1 "strings"
import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import fmt3 "fmt"
import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TYPES int32

const (
	RFC3164 TYPES = 0
	RFC5424 TYPES = 1
	JSON    TYPES = 2
)

var TYPES_name = map[int32]string{
	0: "RFC3164",
	1: "RFC5424",
	2: "JSON",
}
var TYPES_value = map[string]int32{
	"RFC3164": 0,
	"RFC5424": 1,
	"JSON":    2,
}

func (x TYPES) Enum() *TYPES {
	p := new(TYPES)
	*p = x
	return p
}
func (x TYPES) String() string {
	return proto.EnumName(TYPES_name, int32(x))
}
func (x *TYPES) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TYPES_value, data, "TYPES")
	if err != nil {
		return err
	}
	*x = TYPES(value)
	return nil
}

type Rfc3164 struct {
	Timestamp        *int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Hostname         *string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Tag              *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Content          *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Priority         *int32  `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	Facility         *int32  `protobuf:"varint,6,opt,name=facility" json:"facility,omitempty"`
	Severity         *int32  `protobuf:"varint,7,opt,name=severity" json:"severity,omitempty"`
	Id               *string `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rfc3164) Reset()      { *m = Rfc3164{} }
func (*Rfc3164) ProtoMessage() {}

func (m *Rfc3164) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Rfc3164) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Rfc3164) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *Rfc3164) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Rfc3164) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Rfc3164) GetFacility() int32 {
	if m != nil && m.Facility != nil {
		return *m.Facility
	}
	return 0
}

func (m *Rfc3164) GetSeverity() int32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *Rfc3164) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Rfc5424 struct {
	Priority         *int32  `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Facility         *int32  `protobuf:"varint,2,opt,name=facility" json:"facility,omitempty"`
	Severity         *int32  `protobuf:"varint,3,opt,name=severity" json:"severity,omitempty"`
	Version          *int32  `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Timestamp        *int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Hostname         *string `protobuf:"bytes,6,opt,name=hostname" json:"hostname,omitempty"`
	Appname          *string `protobuf:"bytes,7,opt,name=appname" json:"appname,omitempty"`
	Procid           *string `protobuf:"bytes,8,opt,name=procid" json:"procid,omitempty"`
	Msgid            *string `protobuf:"bytes,9,opt,name=msgid" json:"msgid,omitempty"`
	Structureddata   *string `protobuf:"bytes,10,opt,name=structureddata" json:"structureddata,omitempty"`
	Message          *string `protobuf:"bytes,11,opt,name=message" json:"message,omitempty"`
	Id               *string `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rfc5424) Reset()      { *m = Rfc5424{} }
func (*Rfc5424) ProtoMessage() {}

func (m *Rfc5424) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Rfc5424) GetFacility() int32 {
	if m != nil && m.Facility != nil {
		return *m.Facility
	}
	return 0
}

func (m *Rfc5424) GetSeverity() int32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *Rfc5424) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Rfc5424) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Rfc5424) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Rfc5424) GetAppname() string {
	if m != nil && m.Appname != nil {
		return *m.Appname
	}
	return ""
}

func (m *Rfc5424) GetProcid() string {
	if m != nil && m.Procid != nil {
		return *m.Procid
	}
	return ""
}

func (m *Rfc5424) GetMsgid() string {
	if m != nil && m.Msgid != nil {
		return *m.Msgid
	}
	return ""
}

func (m *Rfc5424) GetStructureddata() string {
	if m != nil && m.Structureddata != nil {
		return *m.Structureddata
	}
	return ""
}

func (m *Rfc5424) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Rfc5424) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Json struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Json             *string `protobuf:"bytes,2,opt,name=json" json:"json,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Json) Reset()      { *m = Json{} }
func (*Json) ProtoMessage() {}

func (m *Json) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Json) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

type Food struct {
	Type             *TYPES     `protobuf:"varint,1,req,name=type,enum=messaging.TYPES" json:"type,omitempty"`
	Rfc3164          []*Rfc3164 `protobuf:"bytes,2,rep,name=rfc3164" json:"rfc3164,omitempty"`
	Rfc5424          []*Rfc5424 `protobuf:"bytes,3,rep,name=rfc5424" json:"rfc5424,omitempty"`
	Json             []*Json    `protobuf:"bytes,4,rep,name=json" json:"json,omitempty"`
	Index            *string    `protobuf:"bytes,5,opt,name=index" json:"index,omitempty"`
	IndexType        *string    `protobuf:"bytes,6,opt,name=indexType" json:"indexType,omitempty"`
	TimeNano         *int64     `protobuf:"varint,7,opt,name=timeNano" json:"timeNano,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Food) Reset()      { *m = Food{} }
func (*Food) ProtoMessage() {}

func (m *Food) GetType() TYPES {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RFC3164
}

func (m *Food) GetRfc3164() []*Rfc3164 {
	if m != nil {
		return m.Rfc3164
	}
	return nil
}

func (m *Food) GetRfc5424() []*Rfc5424 {
	if m != nil {
		return m.Rfc5424
	}
	return nil
}

func (m *Food) GetJson() []*Json {
	if m != nil {
		return m.Json
	}
	return nil
}

func (m *Food) GetIndex() string {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return ""
}

func (m *Food) GetIndexType() string {
	if m != nil && m.IndexType != nil {
		return *m.IndexType
	}
	return ""
}

func (m *Food) GetTimeNano() int64 {
	if m != nil && m.TimeNano != nil {
		return *m.TimeNano
	}
	return 0
}

func init() {
	proto.RegisterEnum("messaging.TYPES", TYPES_name, TYPES_value)
}
func (m *Rfc3164) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Hostname = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Tag = &s
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Content = &s
			index = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facility", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Facility = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Severity = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Rfc5424) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facility", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Facility = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Severity = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Hostname = &s
			index = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Appname = &s
			index = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Procid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Procid = &s
			index = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Msgid = &s
			index = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structureddata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Structureddata = &s
			index = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Message = &s
			index = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Json) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Json = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Food) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v TYPES
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TYPES(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rfc3164", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rfc3164 = append(m.Rfc3164, &Rfc3164{})
			m.Rfc3164[len(m.Rfc3164)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rfc5424", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rfc5424 = append(m.Rfc5424, &Rfc5424{})
			m.Rfc5424[len(m.Rfc5424)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Json = append(m.Json, &Json{})
			m.Json[len(m.Json)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Index = &s
			index = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.IndexType = &s
			index = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNano", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeNano = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *Rfc3164) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rfc3164{`,
		`Timestamp:` + valueToStringMessaging(this.Timestamp) + `,`,
		`Hostname:` + valueToStringMessaging(this.Hostname) + `,`,
		`Tag:` + valueToStringMessaging(this.Tag) + `,`,
		`Content:` + valueToStringMessaging(this.Content) + `,`,
		`Priority:` + valueToStringMessaging(this.Priority) + `,`,
		`Facility:` + valueToStringMessaging(this.Facility) + `,`,
		`Severity:` + valueToStringMessaging(this.Severity) + `,`,
		`Id:` + valueToStringMessaging(this.Id) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rfc5424) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rfc5424{`,
		`Priority:` + valueToStringMessaging(this.Priority) + `,`,
		`Facility:` + valueToStringMessaging(this.Facility) + `,`,
		`Severity:` + valueToStringMessaging(this.Severity) + `,`,
		`Version:` + valueToStringMessaging(this.Version) + `,`,
		`Timestamp:` + valueToStringMessaging(this.Timestamp) + `,`,
		`Hostname:` + valueToStringMessaging(this.Hostname) + `,`,
		`Appname:` + valueToStringMessaging(this.Appname) + `,`,
		`Procid:` + valueToStringMessaging(this.Procid) + `,`,
		`Msgid:` + valueToStringMessaging(this.Msgid) + `,`,
		`Structureddata:` + valueToStringMessaging(this.Structureddata) + `,`,
		`Message:` + valueToStringMessaging(this.Message) + `,`,
		`Id:` + valueToStringMessaging(this.Id) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Json) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Json{`,
		`Id:` + valueToStringMessaging(this.Id) + `,`,
		`Json:` + valueToStringMessaging(this.Json) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Food) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Food{`,
		`Type:` + valueToStringMessaging(this.Type) + `,`,
		`Rfc3164:` + strings.Replace(fmt1.Sprintf("%v", this.Rfc3164), "Rfc3164", "Rfc3164", 1) + `,`,
		`Rfc5424:` + strings.Replace(fmt1.Sprintf("%v", this.Rfc5424), "Rfc5424", "Rfc5424", 1) + `,`,
		`Json:` + strings.Replace(fmt1.Sprintf("%v", this.Json), "Json", "Json", 1) + `,`,
		`Index:` + valueToStringMessaging(this.Index) + `,`,
		`IndexType:` + valueToStringMessaging(this.IndexType) + `,`,
		`TimeNano:` + valueToStringMessaging(this.TimeNano) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessaging(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt1.Sprintf("*%v", pv)
}
func (m *Rfc3164) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 1 + sovMessaging(uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Tag != nil {
		l = len(*m.Tag)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Priority != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Severity)))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Rfc5424) Size() (n int) {
	var l int
	_ = l
	if m.Priority != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Severity)))
	}
	if m.Version != nil {
		n += 1 + sovMessaging(uint64(uint32(*m.Version)))
	}
	if m.Timestamp != nil {
		n += 1 + sovMessaging(uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Appname != nil {
		l = len(*m.Appname)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Procid != nil {
		l = len(*m.Procid)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Msgid != nil {
		l = len(*m.Msgid)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Structureddata != nil {
		l = len(*m.Structureddata)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Json) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Json != nil {
		l = len(*m.Json)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Food) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovMessaging(uint64(*m.Type))
	}
	if len(m.Rfc3164) > 0 {
		for _, e := range m.Rfc3164 {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Rfc5424) > 0 {
		for _, e := range m.Rfc5424 {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Json) > 0 {
		for _, e := range m.Json {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Index != nil {
		l = len(*m.Index)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IndexType != nil {
		l = len(*m.IndexType)
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.TimeNano != nil {
		n += 1 + sovMessaging(uint64(*m.TimeNano))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessaging(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessaging(x uint64) (n int) {
	return sovMessaging(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedRfc3164(r randyMessaging, easy bool) *Rfc3164 {
	this := &Rfc3164{}
	if r.Intn(10) != 0 {
		v1 := r.Int63()
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Timestamp = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringMessaging(r)
		this.Hostname = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringMessaging(r)
		this.Tag = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringMessaging(r)
		this.Content = &v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Int31()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.Priority = &v5
	}
	if r.Intn(10) != 0 {
		v6 := r.Int31()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Facility = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Int31()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Severity = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringMessaging(r)
		this.Id = &v8
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessaging(r, 9)
	}
	return this
}

func NewPopulatedRfc5424(r randyMessaging, easy bool) *Rfc5424 {
	this := &Rfc5424{}
	if r.Intn(10) != 0 {
		v9 := r.Int31()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.Priority = &v9
	}
	if r.Intn(10) != 0 {
		v10 := r.Int31()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.Facility = &v10
	}
	if r.Intn(10) != 0 {
		v11 := r.Int31()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.Severity = &v11
	}
	if r.Intn(10) != 0 {
		v12 := r.Int31()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		this.Version = &v12
	}
	if r.Intn(10) != 0 {
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		this.Timestamp = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringMessaging(r)
		this.Hostname = &v14
	}
	if r.Intn(10) != 0 {
		v15 := randStringMessaging(r)
		this.Appname = &v15
	}
	if r.Intn(10) != 0 {
		v16 := randStringMessaging(r)
		this.Procid = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringMessaging(r)
		this.Msgid = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringMessaging(r)
		this.Structureddata = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringMessaging(r)
		this.Message = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringMessaging(r)
		this.Id = &v20
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessaging(r, 13)
	}
	return this
}

func NewPopulatedJson(r randyMessaging, easy bool) *Json {
	this := &Json{}
	if r.Intn(10) != 0 {
		v21 := randStringMessaging(r)
		this.Id = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringMessaging(r)
		this.Json = &v22
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessaging(r, 3)
	}
	return this
}

func NewPopulatedFood(r randyMessaging, easy bool) *Food {
	this := &Food{}
	v23 := TYPES([]int32{0, 1, 2}[r.Intn(3)])
	this.Type = &v23
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Rfc3164 = make([]*Rfc3164, v24)
		for i := 0; i < v24; i++ {
			this.Rfc3164[i] = NewPopulatedRfc3164(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(10)
		this.Rfc5424 = make([]*Rfc5424, v25)
		for i := 0; i < v25; i++ {
			this.Rfc5424[i] = NewPopulatedRfc5424(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.Json = make([]*Json, v26)
		for i := 0; i < v26; i++ {
			this.Json[i] = NewPopulatedJson(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v27 := randStringMessaging(r)
		this.Index = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringMessaging(r)
		this.IndexType = &v28
	}
	if r.Intn(10) != 0 {
		v29 := r.Int63()
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		this.TimeNano = &v29
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessaging(r, 8)
	}
	return this
}

type randyMessaging interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessaging(r randyMessaging) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringMessaging(r randyMessaging) string {
	v30 := r.Intn(100)
	tmps := make([]rune, v30)
	for i := 0; i < v30; i++ {
		tmps[i] = randUTF8RuneMessaging(r)
	}
	return string(tmps)
}
func randUnrecognizedMessaging(r randyMessaging, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMessaging(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMessaging(data []byte, r randyMessaging, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMessaging(data, uint64(key))
		v31 := r.Int63()
		if r.Intn(2) == 0 {
			v31 *= -1
		}
		data = encodeVarintPopulateMessaging(data, uint64(v31))
	case 1:
		data = encodeVarintPopulateMessaging(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMessaging(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMessaging(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMessaging(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMessaging(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Rfc3164) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Rfc3164) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessaging(data, i, uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Hostname)))
		i += copy(data[i:], *m.Hostname)
	}
	if m.Tag != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Tag)))
		i += copy(data[i:], *m.Tag)
	}
	if m.Content != nil {
		data[i] = 0x22
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Content)))
		i += copy(data[i:], *m.Content)
	}
	if m.Priority != nil {
		data[i] = 0x28
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		data[i] = 0x30
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		data[i] = 0x38
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Severity)))
	}
	if m.Id != nil {
		data[i] = 0x42
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Rfc5424) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Rfc5424) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Priority)))
	}
	if m.Facility != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Facility)))
	}
	if m.Severity != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Severity)))
	}
	if m.Version != nil {
		data[i] = 0x20
		i++
		i = encodeVarintMessaging(data, i, uint64(uint32(*m.Version)))
	}
	if m.Timestamp != nil {
		data[i] = 0x28
		i++
		i = encodeVarintMessaging(data, i, uint64(*m.Timestamp))
	}
	if m.Hostname != nil {
		data[i] = 0x32
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Hostname)))
		i += copy(data[i:], *m.Hostname)
	}
	if m.Appname != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Appname)))
		i += copy(data[i:], *m.Appname)
	}
	if m.Procid != nil {
		data[i] = 0x42
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Procid)))
		i += copy(data[i:], *m.Procid)
	}
	if m.Msgid != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Msgid)))
		i += copy(data[i:], *m.Msgid)
	}
	if m.Structureddata != nil {
		data[i] = 0x52
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Structureddata)))
		i += copy(data[i:], *m.Structureddata)
	}
	if m.Message != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Message)))
		i += copy(data[i:], *m.Message)
	}
	if m.Id != nil {
		data[i] = 0x62
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Json) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Json) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Json != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Json)))
		i += copy(data[i:], *m.Json)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Food) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Food) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessaging(data, i, uint64(*m.Type))
	}
	if len(m.Rfc3164) > 0 {
		for _, msg := range m.Rfc3164 {
			data[i] = 0x12
			i++
			i = encodeVarintMessaging(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Rfc5424) > 0 {
		for _, msg := range m.Rfc5424 {
			data[i] = 0x1a
			i++
			i = encodeVarintMessaging(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Json) > 0 {
		for _, msg := range m.Json {
			data[i] = 0x22
			i++
			i = encodeVarintMessaging(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Index != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.Index)))
		i += copy(data[i:], *m.Index)
	}
	if m.IndexType != nil {
		data[i] = 0x32
		i++
		i = encodeVarintMessaging(data, i, uint64(len(*m.IndexType)))
		i += copy(data[i:], *m.IndexType)
	}
	if m.TimeNano != nil {
		data[i] = 0x38
		i++
		i = encodeVarintMessaging(data, i, uint64(*m.TimeNano))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Messaging(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Messaging(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessaging(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Rfc3164) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&messaging.Rfc3164{` + `Timestamp:` + valueToGoStringMessaging(this.Timestamp, "int64"), `Hostname:` + valueToGoStringMessaging(this.Hostname, "string"), `Tag:` + valueToGoStringMessaging(this.Tag, "string"), `Content:` + valueToGoStringMessaging(this.Content, "string"), `Priority:` + valueToGoStringMessaging(this.Priority, "int32"), `Facility:` + valueToGoStringMessaging(this.Facility, "int32"), `Severity:` + valueToGoStringMessaging(this.Severity, "int32"), `Id:` + valueToGoStringMessaging(this.Id, "string"), `XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Rfc5424) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&messaging.Rfc5424{` + `Priority:` + valueToGoStringMessaging(this.Priority, "int32"), `Facility:` + valueToGoStringMessaging(this.Facility, "int32"), `Severity:` + valueToGoStringMessaging(this.Severity, "int32"), `Version:` + valueToGoStringMessaging(this.Version, "int32"), `Timestamp:` + valueToGoStringMessaging(this.Timestamp, "int64"), `Hostname:` + valueToGoStringMessaging(this.Hostname, "string"), `Appname:` + valueToGoStringMessaging(this.Appname, "string"), `Procid:` + valueToGoStringMessaging(this.Procid, "string"), `Msgid:` + valueToGoStringMessaging(this.Msgid, "string"), `Structureddata:` + valueToGoStringMessaging(this.Structureddata, "string"), `Message:` + valueToGoStringMessaging(this.Message, "string"), `Id:` + valueToGoStringMessaging(this.Id, "string"), `XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Json) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&messaging.Json{` + `Id:` + valueToGoStringMessaging(this.Id, "string"), `Json:` + valueToGoStringMessaging(this.Json, "string"), `XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Food) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&messaging.Food{` + `Type:` + valueToGoStringMessaging(this.Type, "messaging.TYPES"), `Rfc3164:` + fmt2.Sprintf("%#v", this.Rfc3164), `Rfc5424:` + fmt2.Sprintf("%#v", this.Rfc5424), `Json:` + fmt2.Sprintf("%#v", this.Json), `Index:` + valueToGoStringMessaging(this.Index, "string"), `IndexType:` + valueToGoStringMessaging(this.IndexType, "string"), `TimeNano:` + valueToGoStringMessaging(this.TimeNano, "int64"), `XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringMessaging(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt2.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMessaging(e map[int32]code_google_com_p_gogoprotobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}
func (this *Rfc3164) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Rfc3164)
	if !ok {
		return fmt3.Errorf("that is not of type *Rfc3164")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Rfc3164 but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Rfc3164but is not nil && this == nil")
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return fmt3.Errorf("Timestamp this(%v) Not Equal that(%v)", *this.Timestamp, *that1.Timestamp)
		}
	} else if this.Timestamp != nil {
		return fmt3.Errorf("this.Timestamp == nil && that.Timestamp != nil")
	} else if that1.Timestamp != nil {
		return fmt3.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return fmt3.Errorf("Hostname this(%v) Not Equal that(%v)", *this.Hostname, *that1.Hostname)
		}
	} else if this.Hostname != nil {
		return fmt3.Errorf("this.Hostname == nil && that.Hostname != nil")
	} else if that1.Hostname != nil {
		return fmt3.Errorf("Hostname this(%v) Not Equal that(%v)", this.Hostname, that1.Hostname)
	}
	if this.Tag != nil && that1.Tag != nil {
		if *this.Tag != *that1.Tag {
			return fmt3.Errorf("Tag this(%v) Not Equal that(%v)", *this.Tag, *that1.Tag)
		}
	} else if this.Tag != nil {
		return fmt3.Errorf("this.Tag == nil && that.Tag != nil")
	} else if that1.Tag != nil {
		return fmt3.Errorf("Tag this(%v) Not Equal that(%v)", this.Tag, that1.Tag)
	}
	if this.Content != nil && that1.Content != nil {
		if *this.Content != *that1.Content {
			return fmt3.Errorf("Content this(%v) Not Equal that(%v)", *this.Content, *that1.Content)
		}
	} else if this.Content != nil {
		return fmt3.Errorf("this.Content == nil && that.Content != nil")
	} else if that1.Content != nil {
		return fmt3.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return fmt3.Errorf("Priority this(%v) Not Equal that(%v)", *this.Priority, *that1.Priority)
		}
	} else if this.Priority != nil {
		return fmt3.Errorf("this.Priority == nil && that.Priority != nil")
	} else if that1.Priority != nil {
		return fmt3.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return fmt3.Errorf("Facility this(%v) Not Equal that(%v)", *this.Facility, *that1.Facility)
		}
	} else if this.Facility != nil {
		return fmt3.Errorf("this.Facility == nil && that.Facility != nil")
	} else if that1.Facility != nil {
		return fmt3.Errorf("Facility this(%v) Not Equal that(%v)", this.Facility, that1.Facility)
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return fmt3.Errorf("Severity this(%v) Not Equal that(%v)", *this.Severity, *that1.Severity)
		}
	} else if this.Severity != nil {
		return fmt3.Errorf("this.Severity == nil && that.Severity != nil")
	} else if that1.Severity != nil {
		return fmt3.Errorf("Severity this(%v) Not Equal that(%v)", this.Severity, that1.Severity)
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt3.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt3.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt3.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Rfc3164) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Rfc3164)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return false
		}
	} else if this.Hostname != nil {
		return false
	} else if that1.Hostname != nil {
		return false
	}
	if this.Tag != nil && that1.Tag != nil {
		if *this.Tag != *that1.Tag {
			return false
		}
	} else if this.Tag != nil {
		return false
	} else if that1.Tag != nil {
		return false
	}
	if this.Content != nil && that1.Content != nil {
		if *this.Content != *that1.Content {
			return false
		}
	} else if this.Content != nil {
		return false
	} else if that1.Content != nil {
		return false
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return false
		}
	} else if this.Priority != nil {
		return false
	} else if that1.Priority != nil {
		return false
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return false
		}
	} else if this.Facility != nil {
		return false
	} else if that1.Facility != nil {
		return false
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return false
		}
	} else if this.Severity != nil {
		return false
	} else if that1.Severity != nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Rfc5424) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Rfc5424)
	if !ok {
		return fmt3.Errorf("that is not of type *Rfc5424")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Rfc5424 but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Rfc5424but is not nil && this == nil")
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return fmt3.Errorf("Priority this(%v) Not Equal that(%v)", *this.Priority, *that1.Priority)
		}
	} else if this.Priority != nil {
		return fmt3.Errorf("this.Priority == nil && that.Priority != nil")
	} else if that1.Priority != nil {
		return fmt3.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return fmt3.Errorf("Facility this(%v) Not Equal that(%v)", *this.Facility, *that1.Facility)
		}
	} else if this.Facility != nil {
		return fmt3.Errorf("this.Facility == nil && that.Facility != nil")
	} else if that1.Facility != nil {
		return fmt3.Errorf("Facility this(%v) Not Equal that(%v)", this.Facility, that1.Facility)
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return fmt3.Errorf("Severity this(%v) Not Equal that(%v)", *this.Severity, *that1.Severity)
		}
	} else if this.Severity != nil {
		return fmt3.Errorf("this.Severity == nil && that.Severity != nil")
	} else if that1.Severity != nil {
		return fmt3.Errorf("Severity this(%v) Not Equal that(%v)", this.Severity, that1.Severity)
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return fmt3.Errorf("Version this(%v) Not Equal that(%v)", *this.Version, *that1.Version)
		}
	} else if this.Version != nil {
		return fmt3.Errorf("this.Version == nil && that.Version != nil")
	} else if that1.Version != nil {
		return fmt3.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return fmt3.Errorf("Timestamp this(%v) Not Equal that(%v)", *this.Timestamp, *that1.Timestamp)
		}
	} else if this.Timestamp != nil {
		return fmt3.Errorf("this.Timestamp == nil && that.Timestamp != nil")
	} else if that1.Timestamp != nil {
		return fmt3.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return fmt3.Errorf("Hostname this(%v) Not Equal that(%v)", *this.Hostname, *that1.Hostname)
		}
	} else if this.Hostname != nil {
		return fmt3.Errorf("this.Hostname == nil && that.Hostname != nil")
	} else if that1.Hostname != nil {
		return fmt3.Errorf("Hostname this(%v) Not Equal that(%v)", this.Hostname, that1.Hostname)
	}
	if this.Appname != nil && that1.Appname != nil {
		if *this.Appname != *that1.Appname {
			return fmt3.Errorf("Appname this(%v) Not Equal that(%v)", *this.Appname, *that1.Appname)
		}
	} else if this.Appname != nil {
		return fmt3.Errorf("this.Appname == nil && that.Appname != nil")
	} else if that1.Appname != nil {
		return fmt3.Errorf("Appname this(%v) Not Equal that(%v)", this.Appname, that1.Appname)
	}
	if this.Procid != nil && that1.Procid != nil {
		if *this.Procid != *that1.Procid {
			return fmt3.Errorf("Procid this(%v) Not Equal that(%v)", *this.Procid, *that1.Procid)
		}
	} else if this.Procid != nil {
		return fmt3.Errorf("this.Procid == nil && that.Procid != nil")
	} else if that1.Procid != nil {
		return fmt3.Errorf("Procid this(%v) Not Equal that(%v)", this.Procid, that1.Procid)
	}
	if this.Msgid != nil && that1.Msgid != nil {
		if *this.Msgid != *that1.Msgid {
			return fmt3.Errorf("Msgid this(%v) Not Equal that(%v)", *this.Msgid, *that1.Msgid)
		}
	} else if this.Msgid != nil {
		return fmt3.Errorf("this.Msgid == nil && that.Msgid != nil")
	} else if that1.Msgid != nil {
		return fmt3.Errorf("Msgid this(%v) Not Equal that(%v)", this.Msgid, that1.Msgid)
	}
	if this.Structureddata != nil && that1.Structureddata != nil {
		if *this.Structureddata != *that1.Structureddata {
			return fmt3.Errorf("Structureddata this(%v) Not Equal that(%v)", *this.Structureddata, *that1.Structureddata)
		}
	} else if this.Structureddata != nil {
		return fmt3.Errorf("this.Structureddata == nil && that.Structureddata != nil")
	} else if that1.Structureddata != nil {
		return fmt3.Errorf("Structureddata this(%v) Not Equal that(%v)", this.Structureddata, that1.Structureddata)
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return fmt3.Errorf("Message this(%v) Not Equal that(%v)", *this.Message, *that1.Message)
		}
	} else if this.Message != nil {
		return fmt3.Errorf("this.Message == nil && that.Message != nil")
	} else if that1.Message != nil {
		return fmt3.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt3.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt3.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt3.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Rfc5424) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Rfc5424)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return false
		}
	} else if this.Priority != nil {
		return false
	} else if that1.Priority != nil {
		return false
	}
	if this.Facility != nil && that1.Facility != nil {
		if *this.Facility != *that1.Facility {
			return false
		}
	} else if this.Facility != nil {
		return false
	} else if that1.Facility != nil {
		return false
	}
	if this.Severity != nil && that1.Severity != nil {
		if *this.Severity != *that1.Severity {
			return false
		}
	} else if this.Severity != nil {
		return false
	} else if that1.Severity != nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if this.Hostname != nil && that1.Hostname != nil {
		if *this.Hostname != *that1.Hostname {
			return false
		}
	} else if this.Hostname != nil {
		return false
	} else if that1.Hostname != nil {
		return false
	}
	if this.Appname != nil && that1.Appname != nil {
		if *this.Appname != *that1.Appname {
			return false
		}
	} else if this.Appname != nil {
		return false
	} else if that1.Appname != nil {
		return false
	}
	if this.Procid != nil && that1.Procid != nil {
		if *this.Procid != *that1.Procid {
			return false
		}
	} else if this.Procid != nil {
		return false
	} else if that1.Procid != nil {
		return false
	}
	if this.Msgid != nil && that1.Msgid != nil {
		if *this.Msgid != *that1.Msgid {
			return false
		}
	} else if this.Msgid != nil {
		return false
	} else if that1.Msgid != nil {
		return false
	}
	if this.Structureddata != nil && that1.Structureddata != nil {
		if *this.Structureddata != *that1.Structureddata {
			return false
		}
	} else if this.Structureddata != nil {
		return false
	} else if that1.Structureddata != nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Json) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Json)
	if !ok {
		return fmt3.Errorf("that is not of type *Json")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Json but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Jsonbut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt3.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt3.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt3.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Json != nil && that1.Json != nil {
		if *this.Json != *that1.Json {
			return fmt3.Errorf("Json this(%v) Not Equal that(%v)", *this.Json, *that1.Json)
		}
	} else if this.Json != nil {
		return fmt3.Errorf("this.Json == nil && that.Json != nil")
	} else if that1.Json != nil {
		return fmt3.Errorf("Json this(%v) Not Equal that(%v)", this.Json, that1.Json)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Json) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Json)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.Json != nil && that1.Json != nil {
		if *this.Json != *that1.Json {
			return false
		}
	} else if this.Json != nil {
		return false
	} else if that1.Json != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Food) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Food)
	if !ok {
		return fmt3.Errorf("that is not of type *Food")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Food but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Foodbut is not nil && this == nil")
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return fmt3.Errorf("Type this(%v) Not Equal that(%v)", *this.Type, *that1.Type)
		}
	} else if this.Type != nil {
		return fmt3.Errorf("this.Type == nil && that.Type != nil")
	} else if that1.Type != nil {
		return fmt3.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if len(this.Rfc3164) != len(that1.Rfc3164) {
		return fmt3.Errorf("Rfc3164 this(%v) Not Equal that(%v)", len(this.Rfc3164), len(that1.Rfc3164))
	}
	for i := range this.Rfc3164 {
		if !this.Rfc3164[i].Equal(that1.Rfc3164[i]) {
			return fmt3.Errorf("Rfc3164 this[%v](%v) Not Equal that[%v](%v)", i, this.Rfc3164[i], i, that1.Rfc3164[i])
		}
	}
	if len(this.Rfc5424) != len(that1.Rfc5424) {
		return fmt3.Errorf("Rfc5424 this(%v) Not Equal that(%v)", len(this.Rfc5424), len(that1.Rfc5424))
	}
	for i := range this.Rfc5424 {
		if !this.Rfc5424[i].Equal(that1.Rfc5424[i]) {
			return fmt3.Errorf("Rfc5424 this[%v](%v) Not Equal that[%v](%v)", i, this.Rfc5424[i], i, that1.Rfc5424[i])
		}
	}
	if len(this.Json) != len(that1.Json) {
		return fmt3.Errorf("Json this(%v) Not Equal that(%v)", len(this.Json), len(that1.Json))
	}
	for i := range this.Json {
		if !this.Json[i].Equal(that1.Json[i]) {
			return fmt3.Errorf("Json this[%v](%v) Not Equal that[%v](%v)", i, this.Json[i], i, that1.Json[i])
		}
	}
	if this.Index != nil && that1.Index != nil {
		if *this.Index != *that1.Index {
			return fmt3.Errorf("Index this(%v) Not Equal that(%v)", *this.Index, *that1.Index)
		}
	} else if this.Index != nil {
		return fmt3.Errorf("this.Index == nil && that.Index != nil")
	} else if that1.Index != nil {
		return fmt3.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.IndexType != nil && that1.IndexType != nil {
		if *this.IndexType != *that1.IndexType {
			return fmt3.Errorf("IndexType this(%v) Not Equal that(%v)", *this.IndexType, *that1.IndexType)
		}
	} else if this.IndexType != nil {
		return fmt3.Errorf("this.IndexType == nil && that.IndexType != nil")
	} else if that1.IndexType != nil {
		return fmt3.Errorf("IndexType this(%v) Not Equal that(%v)", this.IndexType, that1.IndexType)
	}
	if this.TimeNano != nil && that1.TimeNano != nil {
		if *this.TimeNano != *that1.TimeNano {
			return fmt3.Errorf("TimeNano this(%v) Not Equal that(%v)", *this.TimeNano, *that1.TimeNano)
		}
	} else if this.TimeNano != nil {
		return fmt3.Errorf("this.TimeNano == nil && that.TimeNano != nil")
	} else if that1.TimeNano != nil {
		return fmt3.Errorf("TimeNano this(%v) Not Equal that(%v)", this.TimeNano, that1.TimeNano)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Food) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Food)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if len(this.Rfc3164) != len(that1.Rfc3164) {
		return false
	}
	for i := range this.Rfc3164 {
		if !this.Rfc3164[i].Equal(that1.Rfc3164[i]) {
			return false
		}
	}
	if len(this.Rfc5424) != len(that1.Rfc5424) {
		return false
	}
	for i := range this.Rfc5424 {
		if !this.Rfc5424[i].Equal(that1.Rfc5424[i]) {
			return false
		}
	}
	if len(this.Json) != len(that1.Json) {
		return false
	}
	for i := range this.Json {
		if !this.Json[i].Equal(that1.Json[i]) {
			return false
		}
	}
	if this.Index != nil && that1.Index != nil {
		if *this.Index != *that1.Index {
			return false
		}
	} else if this.Index != nil {
		return false
	} else if that1.Index != nil {
		return false
	}
	if this.IndexType != nil && that1.IndexType != nil {
		if *this.IndexType != *that1.IndexType {
			return false
		}
	} else if this.IndexType != nil {
		return false
	} else if that1.IndexType != nil {
		return false
	}
	if this.TimeNano != nil && that1.TimeNano != nil {
		if *this.TimeNano != *that1.TimeNano {
			return false
		}
	} else if this.TimeNano != nil {
		return false
	} else if that1.TimeNano != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
